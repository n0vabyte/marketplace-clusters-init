---
# create cluster ssl certificates

# All certs are in the provisioner node
- name: Create ssl CA directory
  file:
    path: "{{ directory }}"
    state: directory
  loop_control:
    loop_var: directory
  loop:
    - '{{ cluster_ssl_directory }}'
    - '{{ cluster_ssl_ca_directory }}'
  run_once: true
  delegate_to: localhost

# elasticsearch ssl dir
- name: Create Elasticsearch ssl directories
  file:
    path: "{{ cluster_ssl_directory }}/{{ item.instance.hostname }}"
    state: directory
  delegate_to: localhost
  loop: "{{  data.elasticsearch }}"
  register: elasticsearch_ssl_dir

# kibana ssl dir
- name: Create Kibana ssl directories
  file:
    path: "{{ cluster_ssl_directory }}/{{ item.instance.hostname }}"
    state: directory
  delegate_to: localhost
  loop: "{{  data.kibana }}"
  register: kibana_ssl_dir

# logstash ssl dir
- name: Create Logstash ssl directories
  file:
    path: "{{ cluster_ssl_directory }}/{{ item.instance.hostname }}"
    state: directory
  delegate_to: localhost
  loop: "{{  data.logstash }}"
  register: logstash_ssl_dir

# create root ca for signing
- name: Generate CA key
  community.crypto.openssl_privatekey:
    path: '{{ cluster_ssl_ca_directory }}/ca.key'
    cipher: auto
    return_content: true
    owner: root
    group: root
    mode: 0600
  no_log: true
  register: ca_key
  run_once: true
  delegate_to: localhost

- name: Generate ca csr
  community.crypto.openssl_csr:
    path: '{{ cluster_ssl_ca_directory }}/ca.csr'
    privatekey_path: '{{ ca_key.filename }}'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: '{{ ca_common_name }}'
    use_common_name_for_san: false
    basic_constraints:
      - 'CA:TRUE'
    basic_constraints_critical: yes
    key_usage:
      - keyCertSign
    key_usage_critical: true
    owner: root
    group: root
  register: ca_csr
  run_once: true
  delegate_to: localhost

- name: Generate CA crt
  community.crypto.x509_certificate:
    path: '{{ cluster_ssl_ca_directory }}/ca.crt'
    privatekey_path: '{{ ca_key.filename }}'
    csr_path: '{{ ca_csr.filename }}'
    selfsigned_not_after: +3650d
    provider: selfsigned
    owner: root
    group: root
    mode: '0640'
    return_content: true
  register: ca_crt
  run_once: true
  delegate_to: localhost

# gen ssl keys

- name: Generate Elasticsearch SSL keys
  community.crypto.openssl_privatekey:
    path: '{{ elasticsearch_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.key'
    owner: root
    group: root
    mode: '0600'
    return_content: true
  no_log: true
  run_once: true
  delegate_to: localhost
  loop: "{{ data.elasticsearch }}"
  loop_control:
    index_var: count

- name: Generate Logstash SSL keys
  community.crypto.openssl_privatekey:
    path: '{{ logstash_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.key'
    owner: root
    group: root
    mode: '0600'
    return_content: true
  no_log: true
  run_once: true
  delegate_to: localhost
  loop: "{{ data.logstash }}"
  loop_control:
    index_var: count

- name: Generate Kibana SSL keys
  community.crypto.openssl_privatekey:
    path: '{{ kibana_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.key'
    owner: root
    group: root
    mode: '0600'
    return_content: true
  no_log: true
  run_once: true
  delegate_to: localhost
  loop: "{{ data.kibana }}"
  loop_control:
    index_var: count

# gen csrs
- name: Generate Elasticsearch csr
  community.crypto.openssl_csr:
    path: '{{ elasticsearch_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.csr'
    privatekey_path: '{{ elasticsearch_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.key'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: '{{ item.instance.hostname }}'
    use_common_name_for_san: true
    subject_alt_name: "IP:{{ item.instance.ip_priv1 }},DNS:{{ item.instance.hostname }}"
    owner: root
    group: root
    mode: 0600
  run_once: true
  delegate_to: localhost 
  loop: "{{ data.elasticsearch }}"
  loop_control:
    index_var: count

- name: Generate Logstash csr
  community.crypto.openssl_csr:
    path: '{{ logstash_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.csr'
    privatekey_path: '{{ logstash_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.key'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: '{{ item.instance.hostname }}'
    use_common_name_for_san: true
    subject_alt_name: "IP:{{ item.instance.ip_priv1 }},DNS:{{ item.instance.hostname }}"
    owner: root
    group: root
    mode: 0600
  run_once: true
  delegate_to: localhost
  loop: "{{ data.logstash }}"
  loop_control:
    index_var: count

- name: Generate Kibana csr
  community.crypto.openssl_csr:
    path: '{{ kibana_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.csr'
    privatekey_path: '{{ kibana_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.key'
    country_name: '{{ country_name }}'
    state_or_province_name: '{{ state_or_province_name }}'
    locality_name: '{{ locality_name }}'
    organization_name: '{{ organization_name }}'
    email_address: '{{ email_address }}'
    common_name: '{{ item.instance.hostname }}'
    use_common_name_for_san: true
    subject_alt_name: "IP:{{ item.instance.ip_priv1 }},DNS:{{ item.instance.hostname }}"
    owner: root
    group: root
    mode: 0600
  run_once: true
  delegate_to: localhost
  loop: "{{ data.kibana }}"
  loop_control:
    index_var: count

# generate certificates

- name: Generate Elasticsearch cert signed by CA
  community.crypto.x509_certificate:
    path: '{{ elasticsearch_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.crt'
    privatekey_path: '{{ elasticsearch_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.key'
    csr_path: '{{ elasticsearch_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.csr'
    ownca_content: '{{ ca_crt.certificate }}'
    ownca_privatekey_content: '{{ ca_key.privatekey }}'
    ownca_not_after: +3650d
    provider: ownca
    owner: root
    group: root
    mode: '0640'
    return_content: true
  run_once: true
  delegate_to: localhost
  loop: "{{ data.elasticsearch }}"
  loop_control:
    index_var: count

- name: Generate Logstash cert signed by CA
  community.crypto.x509_certificate:
    path: '{{ logstash_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.crt'
    privatekey_path: '{{ logstash_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.key'
    csr_path: '{{ logstash_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.csr'
    ownca_content: '{{ ca_crt.certificate }}'
    ownca_privatekey_content: '{{ ca_key.privatekey }}'
    ownca_not_after: +3650d
    provider: ownca
    owner: root
    group: root
    mode: '0640'
    return_content: true
  run_once: true
  delegate_to: localhost
  loop: "{{ data.logstash }}"
  loop_control:
    index_var: count

- name: Generate Kibana cert signed by CA
  community.crypto.x509_certificate:
    path: '{{ kibana_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.crt'
    privatekey_path: '{{ kibana_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.key'
    csr_path: '{{ kibana_ssl_dir.results[count].path }}/{{ item.instance.hostname }}.csr'
    ownca_content: '{{ ca_crt.certificate }}'
    ownca_privatekey_content: '{{ ca_key.privatekey }}'
    ownca_not_after: +3650d
    provider: ownca
    owner: root
    group: root
    mode: '0640'
    return_content: true
  run_once: true
  delegate_to: localhost
  loop: "{{ data.kibana }}"
  loop_control:
    index_var: count